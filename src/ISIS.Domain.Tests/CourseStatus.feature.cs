// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Domain.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Course Status")]
    public partial class CourseStatusFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CourseStatus.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Course Status", "As a scheduler\nI want to manage the status of courses", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New courses are pending")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void NewCoursesArePending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New courses are pending", new string[] {
                        "domain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have created a course");
#line 8
 testRunner.When("I make the course pending");
#line 9
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Activate a course")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void ActivateACourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Activate a course", new string[] {
                        "domain"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have created a course");
#line 14
 testRunner.And("I have set the course CIP to 12.3456");
#line 15
 testRunner.And("I have set the course description to \"Description goes here\"");
#line 16
 testRunner.When("I activate the course");
#line 17
 testRunner.Then("the course is activated");
#line 18
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Activate an already-active course")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void ActivateAnAlready_ActiveCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Activate an already-active course", new string[] {
                        "domain"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I have created a course");
#line 23
 testRunner.And("I have set the course CIP to 12.3456");
#line 24
 testRunner.And("I have set the course description to \"Description goes here\"");
#line 25
 testRunner.And("I have activated the course");
#line 26
 testRunner.When("I activate the course");
#line 27
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can\'t activate a course without a CIP")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CanTActivateACourseWithoutACIP()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can\'t activate a course without a CIP", new string[] {
                        "domain"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have created a course");
#line 32
 testRunner.And("I have set the course description to \"Description goes here\"");
#line 33
 testRunner.When("I activate the course");
#line 34
 testRunner.Then("the aggregate state is invalid");
#line 35
 testRunner.And("the message is \"Your attempt to activate the course failed because the course is " +
                    "missing a CIP.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can\'t activate a course without a description")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CanTActivateACourseWithoutADescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can\'t activate a course without a description", new string[] {
                        "domain"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have created a course");
#line 40
 testRunner.And("I have set the course CIP to 12.3456");
#line 41
 testRunner.When("I activate the course");
#line 42
 testRunner.Then("the aggregate state is invalid");
#line 43
 testRunner.And("the message is \"Your attempt to activate the course failed because the course is " +
                    "missing a description.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a course pending")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeACoursePending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a course pending", new string[] {
                        "domain"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have created and activated a course");
#line 48
 testRunner.When("I make the course pending");
#line 49
 testRunner.Then("the course is made pending");
#line 50
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a pending course pending")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeAPendingCoursePending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a pending course pending", new string[] {
                        "domain"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have created and activated a course");
#line 55
 testRunner.And("I make the course pending");
#line 56
 testRunner.When("I make the course pending");
#line 57
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate a pending course")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateAPendingCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate a pending course", new string[] {
                        "domain"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("I have created a course");
#line 62
 testRunner.When("I deactivate the course");
#line 63
 testRunner.Then("the course is deactivated");
#line 64
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate an active course")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateAnActiveCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate an active course", new string[] {
                        "domain"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I have created and activated a course");
#line 69
 testRunner.When("I deactivate the course");
#line 70
 testRunner.Then("the course is deactivated");
#line 71
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate a deactive course")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateADeactiveCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate a deactive course", new string[] {
                        "domain"});
#line 74
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.And("I have deactivated a course");
#line 77
 testRunner.When("I deactivate the course");
#line 78
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
