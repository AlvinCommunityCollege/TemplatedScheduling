// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Domain.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Template Course Type")]
    public partial class TemplateCourseTypeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TemplateCourseType.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Template Course Type", "As a scheduler\nI want to manage the course types of templates", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cant set course type on a CE template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CantSetCourseTypeOnACETemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cant set course type on a CE template", new string[] {
                        "domain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have created a CE course and template");
#line 8
 testRunner.When("I change the template\'s course type to \"ACAD\"");
#line 9
 testRunner.Then("the aggregate state is invalid");
#line 10
 testRunner.And("the message is \"Your attempt to change the course type failed because this is a c" +
                    "ontinuing education course.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cant set CE course type on a template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CantSetCECourseTypeOnATemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cant set CE course type on a template", new string[] {
                        "domain"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have created a course and template");
#line 15
 testRunner.When("I change the template\'s course type to \"Continuing Education\"");
#line 16
 testRunner.Then("the aggregate state is invalid");
#line 17
 testRunner.And("the message is \"Your attempt to change the course type failed. This course type i" +
                    "s reserved for continuing education courses only.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cant set CWECM course type on a template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CantSetCWECMCourseTypeOnATemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cant set CWECM course type on a template", new string[] {
                        "domain"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have created a course and template");
#line 22
 testRunner.When("I change the template\'s course type to \"Continuing Education WECM\"");
#line 23
 testRunner.Then("the aggregate state is invalid");
#line 24
 testRunner.And("the message is \"Your attempt to change the course type failed. This course type i" +
                    "s reserved for continuing education courses only.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set course type on a template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void SetCourseTypeOnATemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set course type on a template", new string[] {
                        "domain"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have created a course and template");
#line 29
 testRunner.When("I change the template\'s course type to \"General Academic\"");
#line 30
 testRunner.Then("the template\'s course type is changed to \"General Academic\"");
#line 31
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set course type to the same")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void SetCourseTypeToTheSame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set course type to the same", new string[] {
                        "domain"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I have created a course and template");
#line 36
 testRunner.And("I have changed the template\'s course type to \"General Academic\"");
#line 37
 testRunner.When("I change the template\'s course type to \"General Academic\"");
#line 38
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
