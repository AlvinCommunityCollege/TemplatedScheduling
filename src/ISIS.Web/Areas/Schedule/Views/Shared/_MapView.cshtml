<script id="mapView" type="text/html">
    <div>
        {{tmpl(model) "#campusDropdown" }}
        <span id="buildingDropdownContainer">
            {{tmpl(model.Campuses[0]) "#buildingDropdown"}}
        </span>
        <span id="mapDropdownContainer">
            {{tmpl(model.Campuses[0].Buildings[0]) "#mapsDropdown"}}
        </span>
        <div id="map"></div>
        <fieldset id="legend">
            <legend>Legend</legend>
            <ul>
                <li><div style='background-color: red'/>Room occupied by another section at this time.</li>
                <li><div style='background-color: yellow'/>Insufficient capacity.</li>
                <li><div style='background-color: orange'/>Room does not contain all required equipment.</li>
                <li><div style='background-color: green'/>Room matches all criteria.</li>
            </ul>
        </fieldset>
    </div>
</script>
<script id="campusDropdown" type="text/html">
        <select id="campuses">
            {{each Campuses}}
                <option>${$value.Name}</option>
            {{/each}}
        </select>
</script>
<script id="buildingDropdown" type="text/html">
        <select id="buildings">
            {{each Buildings}}
                <option>${$value.Name}</option>
            {{/each}}
        </select>
</script>
<script id="mapsDropdown" type="text/html">
        <select id="maps">
            {{each BuildingMaps}}
                <option>${$value.Name}</option>
            {{/each}}
        </select>
</script>
<script id="errorDialogTemplate" type="text/html">
    <p>
        <span class='ui-icon ui-icon-alert' style='float:left; margin:0 7px 50px 0;'></span>
        Sorry. We had trouble loading data for this map.
    </p>
</script>

<script type="text/javascript">

    var svg = null;
    var selectedMap = null;
    var roomData = null;
    var roomAvailabilityData = null;

    afterBind.push(function () {
        rebind();
        mapChanged();
    });

    function rebind() {
        $("#campuses").unbind('change').change(campusChanged);
        $("#buildings").unbind('change').change(buildingChanged);
        $("#maps").unbind('change').change(mapChanged);
    }

    function campusChanged() {
        var campus = getSelectedCampus();
        var content = $('#buildingDropdown').tmpl(campus);
        $("#buildingDropdownContainer").empty().append(content);
        rebind();
        buildingChanged();
    }

    function buildingChanged() {
        var building = getSelectedBuilding();
        var content = $('#mapsDropdown').tmpl(building);
        $("#mapDropdownContainer").empty().append(content);
        rebind();
        mapChanged();
    }

    function showError() {
        var dialogContent = $("#errorDialogTemplate").tmpl(null);
        $("<div />")
                .attr('title', 'Error loading map data.')
                .append(dialogContent)
                .dialog({
                    modal: true,
                    resizable: false,
                    close: function () {
                        $(this).remove();
                        
                    }
                });
    }
    
    function mapChanged() {
        selectedMap = getSelectedMap();
        roomData = null;
        roomAvailabilityData = null;
        svg = null;

        var d1 = $.Deferred();
        var d2 = loadRoomData();
        var d3 = loadRoomAvailability();

        d1
        .done(function () {
            console.log('svg loaded');
        })
                .fail(function () {
                    console.log('Loading the svg failed.');
                });

        d2
        .done(function() {
            console.log('Room data loaded.');
        })
        .fail(function() {
            console.log('Loading the room data failed.');
        });

        d3
        .done(function () {
            console.log('Room availability data loaded.');
        })
        .fail(function () {
            console.log('Loading the room availability data failed.');
        });

        $.when(d2, d3)
                    .done(function () {
                        changeMap().done(function (svg) {
                            console.log('Done displaying svg');
                            d1.resolve(svg);
                        });
                    });

        $.when(d1, d2, d3)
                .done(function (newSvg, newRoomData, newRoomAvailData) {
                    console.log('Ready to display room availability data.');
                    console.log(newSvg);
                    console.log(newRoomData[0]);
                    console.log(newRoomAvailData[0]);
                    roomData = newRoomData[0];
                    roomAvailabilityData = newRoomAvailData[0];
                    svg = newSvg;
                    displayAvailability();
                })
                .fail(function (err) {
                    console.log('Something didnt load.');
                    console.log(err);
                    showError();
                });
    }

    function getSelectedCampus() {
        for (var campusIdx in model.Campuses) {
            var campus = model.Campuses[campusIdx];
            if (campus.Name == $("#campuses").val())
                return campus;
        }
        return null;
    }

    function getSelectedBuilding() {
        var campus = getSelectedCampus();
        if (campus)
            for (var buildingIdx in campus.Buildings) {
                var building = campus.Buildings[buildingIdx];
                if (building.Name == $("#buildings").val())
                    return building;
            }
        return null;
    }

    function getSelectedMap() {
        var building = getSelectedBuilding();
        if (building)
            for (var mapIdx in building.BuildingMaps) {
                var map = building.BuildingMaps[mapIdx];
                if (map.Name == $("#maps").val())
                    return map;
            }
        return null;
    }

    function changeMap() {
        var dfd = $.Deferred();
        $('#map').svg('destroy');
        $('#map').svg({
            loadURL: selectedMap.MapImageUrl,
            onLoad: function (svg) {
                dfd.resolve(svg);
            }
        });
        return dfd.promise();
    }

    function loadRoomData() {
        return $.getJSON(selectedMap.MapRoomDataUrl);
    }

    function loadRoomAvailability() {
        return $.getJSON(selectedMap.AvailabilityUrl);
    }

    function displayAvailability() {
        console.log('Displaying availability information');
        console.log(roomData);
        var tooltips = [];
        $.each(roomData.rooms, function(idx, room) {
            console.log(room);
            var avail = getRoomAvailability(room.number);
            if (avail)
                displayRoomAvailability(room, avail, tooltips);
        });
        console.log('There are ' + tooltips.length + ' tooltips to add to the image.');
        $.each(tooltips, addTooltipToImage);
    }

    function displayRoomAvailability(room, avail, tooltips) {
        console.log(avail);
        var id = 'room' + room.number;
        var points = getPath(room);
        var options = {};
        switch (avail.Status) {
            case 0: // Available
                options = { id: id, fill: 'green', fillOpacity: 0.5, stroke: 'none', strokeWidth: 3 };
                break;
            case 1: // Unavailable
                options = { id: id, fill: 'red', fillOpacity: 0.5, stroke: 'none', strokeWidth: 3 };
                break;
            case 2: // ReducedCapacity
                options = { id: id, fill: 'yellow', fillOpacity: 0.5, stroke: 'none', strokeWidth: 3 };
                break;
            case 3: // ReducedCapacity
                options = { id: id, fill: 'orange', fillOpacity: 0.5, stroke: 'none', strokeWidth: 3 };
                break;
        };

        var poly = svg.polygon(points, options);
        bindRoomSelection(poly, avail.RoomId);
        addTooltipData(id, points, avail.Message, tooltips);
    }

    function bindRoomSelection(polygon, roomId) {
        $(polygon).bind('click', { roomId: roomId }, roomSelected);
    }
    
    function addTooltipData(polygonId, points, message, tooltips) {
        if (message == null || message == '')
            return;

        var tipid = polygonId + 'tag';
        var tooltipData = {
            polygonId: polygonId,
            tooltipId: tipid,
            center: getCenter(points),
            options: {
                id: tipid,
                fontSize: 42,
                fontWeight: 'bold',
                fill: 'grey',
                stroke: 'black',
                strokeWidth: '1px',
                visibility: 'hidden'
            },
            text: message
        };
        tooltips.push(tooltipData);
        console.log('Added tool tip data to array.');
        console.log(tooltipData);
    }

    function addTooltipToImage(tooltipIndex, tooltip) {
        var tooltipid = tooltip.tooltipId;
        var center = tooltip.center;
        
        var tooltipObject = svg.text(null, center[0], center[1],
                tooltip.text, tooltip.options);
        
        var width = tooltipObject.getBBox().width;
        var offset = width / 2;
        var newX = center[0] - offset;
        
        $(tooltipObject).attr('x', newX);
        
        $('#' + tooltip.polygonId, svg.root())
                                        .bind('mouseenter', { svg: svg, tooltipid: tooltipid }, showTooltip)
                                        .bind('mouseleave', { svg: svg, tooltipid: tooltipid }, hideTooltip);
    }

    function getRoomAvailability(roomNumber) {
        for (var availIdx in roomAvailabilityData) {
            var avail = roomAvailabilityData[availIdx];
            if (avail.Room == roomNumber)
                return avail;
        }
        console.log('Room #' + roomNumber + ' has no availability information.');
        return null;
    }

    function getPath(room) {
        var points = [];
        for (var pointIdx in room.path) {
            var point = room.path[pointIdx];
            points.push([point.x, point.y]);
        }
        return points;
    }

    function getCenter(points) {
        var xSum = 0;
        var ySum = 0;
        for (var pointIdx in points) {
            var point = points[pointIdx];
            xSum += point[0];
            ySum += point[1];
        }
        return [xSum / points.length, ySum / points.length];
    }

    function showTooltip(event) {
        var tooltipid = event.data.tooltipid;
        var svg = event.data.svg;
        $('#' + tooltipid, svg.root()).attr('visibility', 'visible');
    }

    function hideTooltip(event) {
        var tooltipid = event.data.tooltipid;
        var svg = event.data.svg;
        $('#' + tooltipid, svg.root()).attr('visibility', 'hidden');
    }

    
</script>