@model Details

@{
    ViewBag.Title = Model.RoomName;
    ViewData["Breadcrumbs"] = new[] { 
        new Breadcrumb(Model.CampusName, @Url.Action<CampusController>(c => c.Details(Model.CampusId))) ,
        new Breadcrumb(Model.BuildingName, @Url.Action<BuildingController>(c => c.Details(Model.BuildingId))),
        new Breadcrumb(Model.MapName, @Url.Action<MapController>(c => c.Details(Model.MapId)))
    };
}

@Html.Partial("_Tree")

<script id="template" type="text/html">
    {{tmpl "#treeTemplateProxy"}}
    <div class="content">
        <ul class="links">
            <li><a href="#" id="moveRoomLink">Move Room</a></li>
            <li><a href="#" id="removeRoomLink">Remove Room</a></li>
        </ul>
        <div class="display-label">Room</div>
        <div class="display-field">${RoomName}
            <button id="renameRoom" class="icon-pencil no-text">Rename Room</button>
        </div>

        

        <div id="map"></div>
    </div>
    
    <div id="removeRoomDialog" class="hidden" title="Warning!">
        @using (Html.BeginForm<RoomController>(c => c.RemoveRoom(null), FormMethod.Post, new {id = "removeRoomForm"}))
        {
            <input type="hidden" name="RoomId" value="${Id}" />
            <p class="warning">
                This action will remove the room. It cannot be undone.
            </p>
        }
    </div>
    
    <div id="renameRoomDialog" class="hidden" title="Rename this room">
        @using (Html.BeginForm<RoomController>(c => c.RenameRoom(null), FormMethod.Post, new {id = "renameRoomForm"}))
        {
            <input type="hidden" name="RoomId" value="${Id}" />
            <div class="edit-label">New Room Name</div>
            <div class="edit-field">
                <input type="text" name="NewRoomName" value="${RoomName}" />
            </div>
        }
    </div>

    <div class="hidden" id="moveRoomPostback">
        @Html.TemplateActionLink("Invisible","MoveRoom",new {Id = "${Id}"})
    </div>

</script>

<script type="text/javascript">

    var isMovingRoom = false;
    var points = [];

    ConfigureDialog(
        "#removeRoomDialog",
        "#removeRoomForm",
        "Yes, I'm absolutely positively sure.",
        "#removeRoomLink",
        function () { return !isMovingRoom; });

    ConfigureDialog(
        "#renameRoomDialog",
        "#renameRoomForm",
        "Yes, rename this room.",
        "#renameRoom",
        function () { return !isMovingRoom; });

    afterBind.push(function () {
        $("#map").css("cursor", "default");
        $.when(loadMap(), displaySVG())
            .done(function (mapData, svg) {
                mapData = mapData[2].responseText;
                svg.load(mapData);
                resizeMap(svg, mapData);
                drawRoom(svg);
                bindMapClickEvents();
            });
    });

    function displaySVG() {
        var svgPromise = $.Deferred();
        $('#map').svg({
            onLoad: function (svg) {
                svgPromise.resolve(svg);
            }
        });
        return svgPromise.promise();
    }

    function loadMap() {
        return $.get(model.MapImageUrl);
    }

    function getMapXmlDoc(mapData) {
        return $.parseXML(mapData);
    }

    function getMapSize(mapDocument) {
        var svgElem = $(mapDocument).find("svg");
        return {
            width: $(svgElem).attr("width"),
            height: $(svgElem).attr("height")
        };
    }

    function drawRoom(svg) {
        var options = { id: 'room', fill: 'blue', fillOpacity: 0.5, stroke: 'none', strokeWidth: 3 };
        var points = model.RoomPolygon.Points;
        svg.polygon(points, options);
    }

    function resizeMap(svg, mapData) {
        var mapDoc = getMapXmlDoc(mapData);
        var mapSize = getMapSize(mapDoc);
        svg.configure(mapSize);
    }

    function getSvg() {
        return $("#map").svg('get');
    }
    
    function eraseRoom(svg) {
        var room = svg.getElementById('room');
        if (room)
            svg.remove(room);
    }

    function bindMapClickEvents() {
        $("#map").die('mouseup');
        $("#map").die('contextmenu');
        $("#moveRoomLink").die('click');
        $("#map").live('mouseup', map_onMouseUp);
        $("#map").live('contextmenu', function(e) {
            e.preventDefault();
        });
        $("#moveRoomLink").live('click', startMovingRoom);
    }

    function map_onMouseUp(event) {
        switch (event.button) {
            case 2:
                stopMovingRoom();
                break;
            case 0:
                var x = event.clientX - $("#map").position().left;
                var y = event.clientY - $("#map").position().top;
                addPoint(x, y);
                break;
        }
    }

    function startMovingRoom() {
        if (isMovingRoom)
            return;
        console.log("start moving");
        points = [];
        eraseRoom(getSvg());
        $(".ui-button").button('disable');
        $("#map").css("cursor", "crosshair");
        isMovingRoom = true;
    }

    function stopMovingRoom() {
        if (!isMovingRoom)
            return;
        console.log("stop moving");
        $("#map").css("cursor", "default");

        console.log(points);
        postMoveRoom(points)
            .done(function (returnedPoints) {
                model.RoomPolygon.Points = returnedPoints;
                $(".ui-button").button('enable');
                isMovingRoom = false;
                bindMapClickEvents();
                drawRoom(getSvg());
            });
    }

    function addPoint(x, y) {
        if (!isMovingRoom)
            return;
        points.push([x, y]);
    }

    function postMoveRoom(points) {
        var url = $("#moveRoomPostback a").attr("href");
        return $.ajax(url, {
                type: "POST",
                dataType: "json",
                data: { RoomId: model.Id, Points: JSON.stringify(points) }
            });
    }
    
</script>

<div data-bind='template: "template"' />