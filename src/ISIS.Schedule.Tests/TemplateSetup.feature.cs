// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Schedule
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Template Setup")]
    public partial class TemplateSetupFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TemplateSetup.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Template Setup", "As a scheduler\nI want to setup new section templates", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CreateATemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a template", new string[] {
                        "domain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have set up a new course");
#line 8
 testRunner.When("I create the template \"Template Label Here\"");
#line 9
 testRunner.Then("the template is created");
#line 10
 testRunner.And("the template label is \"Template Label Here\"");
#line 11
 testRunner.And("the template data matches the course data");
#line 12
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Template requires course title")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void TemplateRequiresCourseTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Template requires course title", new string[] {
                        "domain"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have created a course");
#line 17
 testRunner.And("I have set the course description to \"Description goes here\"");
#line 18
 testRunner.When("I create the template");
#line 19
 testRunner.Then("the aggregate state is invalid");
#line 20
 testRunner.And("the message is \"Your attempt to create a template failed because the course is mi" +
                    "ssing a title.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Template requires course description")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void TemplateRequiresCourseDescription()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Template requires course description", new string[] {
                        "domain"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("I have created a course");
#line 25
 testRunner.And("I have renamed the course to \"Course Title Here\"");
#line 26
 testRunner.When("I create the template");
#line 27
 testRunner.Then("the aggregate state is invalid");
#line 28
 testRunner.And("the message is \"Your attempt to create a template failed because the course is mi" +
                    "ssing a description.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
