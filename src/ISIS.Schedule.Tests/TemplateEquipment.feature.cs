// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Schedule
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Template Equipment")]
    public partial class TemplateEquipmentFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TemplateEquipment.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Template Equipment", "As a department chair\nI want to track the equipment required to properly teach a " +
                    "template", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add required instructor equipment for template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddRequiredInstructorEquipmentForTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add required instructor equipment for template", new string[] {
                        "domain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have set up a course and template and activated the template");
#line 8
 testRunner.When("I require 1 \"whiteboard\" for the template");
#line 9
 testRunner.Then("1 \"whiteboard\" is required for the template, for a total of 1");
#line 10
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add required student equipement for template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddRequiredStudentEquipementForTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add required student equipement for template", new string[] {
                        "domain"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have set up a course and template and activated the template");
#line 15
 testRunner.When("I require 1 \"PC\" per student for the template");
#line 16
 testRunner.Then("1 \"PC\" per student is required for the template");
#line 17
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add required shared student equipement for template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddRequiredSharedStudentEquipementForTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add required shared student equipement for template", new string[] {
                        "domain"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("I have set up a course and template and activated the template");
#line 22
 testRunner.When("I require 1 \"lab sink\" per 2 students for the template");
#line 23
 testRunner.Then("1 \"lab sink\" per 2 students is required for the template");
#line 24
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove required instructor equipment for template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemoveRequiredInstructorEquipmentForTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove required instructor equipment for template", new string[] {
                        "domain"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have set up a course and template and activated the template");
#line 29
 testRunner.And("I require 1 \"whiteboard\" for the template");
#line 30
 testRunner.When("I no longer require 1 \"whiteboard\" for the template");
#line 31
 testRunner.Then("1 \"whiteboard\" is no longer required for the template, for a total of 0");
#line 32
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove required student equipement for template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemoveRequiredStudentEquipementForTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove required student equipement for template", new string[] {
                        "domain"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I have set up a course and template and activated the template");
#line 37
 testRunner.When("I no longer require 1 \"PC\" per student for the template");
#line 38
 testRunner.Then("1 \"PC\" per student is no longer required for the template");
#line 39
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove required shared student equipement for template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemoveRequiredSharedStudentEquipementForTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove required shared student equipement for template", new string[] {
                        "domain"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have set up a course and template and activated the template");
#line 44
 testRunner.When("I no longer require 1 \"lab sink\" per 2 students for the template");
#line 45
 testRunner.Then("1 \"lab sink\" per 2 students is no longer required for the template");
#line 46
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add additional student equipment")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddAdditionalStudentEquipment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add additional student equipment", new string[] {
                        "domain"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I have set up a course and template and activated the template");
#line 51
 testRunner.And("I require 1 \"PC\" per 2 students for the template");
#line 52
 testRunner.When("I require 1 \"PC\" per student for the template");
#line 53
 testRunner.Then("1 \"PC\" per student is required for the template");
#line 54
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add additional instructor equipment")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddAdditionalInstructorEquipment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add additional instructor equipment", new string[] {
                        "domain"});
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("I have set up a course and template and activated the template");
#line 59
 testRunner.And("I require 1 \"PC\" for the template");
#line 60
 testRunner.When("I require 2 \"PC\" for the template");
#line 61
 testRunner.Then("2 \"PC\" is required for the template, for a total of 3");
#line 62
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Instructor equipment doesnt affect student equipment")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void InstructorEquipmentDoesntAffectStudentEquipment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Instructor equipment doesnt affect student equipment", new string[] {
                        "domain"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("I have set up a course and template and activated the template");
#line 67
 testRunner.And("I require 1 \"PC\" per student for the template");
#line 68
 testRunner.When("I require 1 \"PC\" for the template");
#line 69
 testRunner.Then("1 \"PC\" is required for the template, for a total of 1");
#line 70
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
