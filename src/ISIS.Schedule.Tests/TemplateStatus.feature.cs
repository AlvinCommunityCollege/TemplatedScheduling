// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Schedule
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Template Status")]
    public partial class TemplateStatusFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TemplateStatus.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Template Status", "As a scheduler\nI want to manage the status of templates", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("New templates are pending")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void NewTemplatesArePending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New templates are pending", new string[] {
                        "domain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have created a course and template");
#line 8
 testRunner.When("I make the template pending");
#line 9
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Activate a template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void ActivateATemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Activate a template", new string[] {
                        "domain"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have created a course and template");
#line 14
 testRunner.When("I activate the template");
#line 15
 testRunner.Then("the template is activated");
#line 16
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Activate an already-active template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void ActivateAnAlready_ActiveTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Activate an already-active template", new string[] {
                        "domain"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have created a course and template and activated the template");
#line 21
 testRunner.When("I activate the template");
#line 22
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a template pending")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeATemplatePending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a template pending", new string[] {
                        "domain"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have created a course and template and activated the template");
#line 27
 testRunner.When("I make the template pending");
#line 28
 testRunner.Then("the template is made pending");
#line 29
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a pending template pending")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeAPendingTemplatePending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a pending template pending", new string[] {
                        "domain"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have created a course and template and activated the template");
#line 34
 testRunner.And("I have made the template pending");
#line 35
 testRunner.When("I make the template pending");
#line 36
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate a pending template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateAPendingTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate a pending template", new string[] {
                        "domain"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have created a course and template");
#line 41
 testRunner.When("I deactivate the template");
#line 42
 testRunner.Then("the template is deactivated");
#line 43
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate an active template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateAnActiveTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate an active template", new string[] {
                        "domain"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have created a course and template and activated the template");
#line 48
 testRunner.When("I deactivate the template");
#line 49
 testRunner.Then("the template is deactivated");
#line 50
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate a deactive template")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateADeactiveTemplate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate a deactive template", new string[] {
                        "domain"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have created a course and template");
#line 55
 testRunner.And("I have deactivated a template");
#line 56
 testRunner.When("I deactivate the template");
#line 57
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deactivate an obsolete course")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DeactivateAnObsoleteCourse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate an obsolete course", new string[] {
                        "domain"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("I have created a course and template");
#line 62
 testRunner.And("I have made the template obsolete");
#line 63
 testRunner.When("I deactivate the template");
#line 64
 testRunner.Then("the template is deactivated");
#line 65
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a pending template obsolete")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeAPendingTemplateObsolete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a pending template obsolete", new string[] {
                        "domain"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("I have created a course and template");
#line 70
 testRunner.When("I make the template obsolete");
#line 71
 testRunner.Then("the template is made obsolete");
#line 72
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make an active course obsolete")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeAnActiveCourseObsolete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make an active course obsolete", new string[] {
                        "domain"});
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.Given("I have created a course and template and activated the template");
#line 77
 testRunner.When("I make the template obsolete");
#line 78
 testRunner.Then("the template is made obsolete");
#line 79
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a deactive template obsolete")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeADeactiveTemplateObsolete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a deactive template obsolete", new string[] {
                        "domain"});
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I have created a course and template");
#line 84
 testRunner.And("I have deactivated a template");
#line 85
 testRunner.When("I make the template obsolete");
#line 86
 testRunner.Then("the template is made obsolete");
#line 87
 testRunner.Then("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make an obsolete template obsolete")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MakeAnObsoleteTemplateObsolete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make an obsolete template obsolete", new string[] {
                        "domain"});
#line 90
this.ScenarioSetup(scenarioInfo);
#line 91
 testRunner.Given("I have created a course and template");
#line 92
 testRunner.And("I have made the template obsolete");
#line 93
 testRunner.When("I make the template obsolete");
#line 94
 testRunner.Then("it does nothing");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
