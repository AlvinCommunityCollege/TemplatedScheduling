// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ISIS.Schedule
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Room Setup")]
    public partial class RoomSetupFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RoomSetup.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Room Setup", "As a scheduler\nI want to set up rooms", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a room")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CreateARoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a room", new string[] {
                        "domain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.When("I create the room A-123");
#line 8
 testRunner.Then("the room A-123 is created");
#line 9
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new equipment to room")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddNewEquipmentToRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new equipment to room", new string[] {
                        "domain"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have created a room");
#line 14
 testRunner.When("I add 15 student PCs to the room");
#line 15
 testRunner.Then("15 student PCs are added to the room for a total of 15");
#line 16
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add additional equipment to room")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AddAdditionalEquipmentToRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add additional equipment to room", new string[] {
                        "domain"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have created a room");
#line 21
 testRunner.And("I have added 15 student PCs to the room for a total of 15");
#line 22
 testRunner.When("I add 5 student PCs to the room");
#line 23
 testRunner.Then("5 student PCs are added to the room for a total of 20");
#line 24
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove some equipment from room")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemoveSomeEquipmentFromRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove some equipment from room", new string[] {
                        "domain"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I have created a room");
#line 29
 testRunner.And("I have added 15 student PCs to the room for a total of 15");
#line 30
 testRunner.When("I remove 5 student PCs from the room");
#line 31
 testRunner.Then("5 student PCs are removed from the room for a total of 10");
#line 32
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove all equipment from room")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemoveAllEquipmentFromRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove all equipment from room", new string[] {
                        "domain"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I have created a room");
#line 37
 testRunner.And("I have added 15 student PCs to the room for a total of 15");
#line 38
 testRunner.When("I remove 15 student PCs from the room");
#line 39
 testRunner.Then("15 student PCs are removed from the room for a total of 0");
#line 40
 testRunner.And("it does nothing else");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove equipment that doesnt exist")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void RemoveEquipmentThatDoesntExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove equipment that doesnt exist", new string[] {
                        "domain"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I have created a room");
#line 45
 testRunner.When("I remove 15 student PCs from the room");
#line 46
 testRunner.Then("the aggregate state is invalid");
#line 47
 testRunner.And("the message is \"Your attempt to equipment failed. This room doesn\'t have 15 stude" +
                    "nt PCs.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
